"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./utils/performance.ts":
/*!******************************!*\
  !*** ./utils/performance.ts ***!
  \******************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getOptimizedImageProps: function() { return /* binding */ getOptimizedImageProps; },\n/* harmony export */   lazyLoadResources: function() { return /* binding */ lazyLoadResources; },\n/* harmony export */   logBundleInfo: function() { return /* binding */ logBundleInfo; },\n/* harmony export */   monitorMemoryUsage: function() { return /* binding */ monitorMemoryUsage; },\n/* harmony export */   observePerformance: function() { return /* binding */ observePerformance; },\n/* harmony export */   preloadCriticalResources: function() { return /* binding */ preloadCriticalResources; },\n/* harmony export */   registerServiceWorker: function() { return /* binding */ registerServiceWorker; },\n/* harmony export */   reportWebVitals: function() { return /* binding */ reportWebVitals; }\n/* harmony export */ });\n/**\n * Performance monitoring and optimization utilities\n */ // Web Vitals tracking\nconst reportWebVitals = (metric)=>{\n    if (false) {}\n};\n// Preload critical resources\nconst preloadCriticalResources = ()=>{\n    if (true) {\n        // Preload Supabase client\n        Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! @/utils/supabase/client */ \"(app-pages-browser)/./utils/supabase/client.ts\"));\n        // Preload critical components\n        __webpack_require__.e(/*! import() */ \"_app-pages-browser_components_forms_WorkoutForm_tsx-_69c70\").then(__webpack_require__.bind(__webpack_require__, /*! @/components/forms/WorkoutForm */ \"(app-pages-browser)/./components/forms/WorkoutForm.tsx\"));\n        __webpack_require__.e(/*! import() */ \"_app-pages-browser_components_lists_RecordsList_tsx-_064e0\").then(__webpack_require__.bind(__webpack_require__, /*! @/components/lists/RecordsList */ \"(app-pages-browser)/./components/lists/RecordsList.tsx\"));\n    }\n};\n// Lazy load non-critical resources\nconst lazyLoadResources = ()=>{\n    if (true) {\n        // Load after initial render\n        setTimeout(()=>{\n            Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! @/utils/calculations */ \"(app-pages-browser)/./utils/calculations.ts\"));\n            Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! @/utils/conversions */ \"(app-pages-browser)/./utils/conversions.ts\"));\n        }, 1000);\n    }\n};\n// Performance observer for monitoring\nconst observePerformance = ()=>{\n    if ( true && \"PerformanceObserver\" in window) {\n        // Observe Largest Contentful Paint\n        const lcpObserver = new PerformanceObserver((list)=>{\n            const entries = list.getEntries();\n            const lastEntry = entries[entries.length - 1];\n            console.log(\"LCP:\", lastEntry.startTime);\n        });\n        try {\n            lcpObserver.observe({\n                entryTypes: [\n                    \"largest-contentful-paint\"\n                ]\n            });\n        } catch (e) {\n            // Fallback for browsers that don't support LCP\n            console.log(\"LCP observation not supported\");\n        }\n        // Observe First Input Delay\n        const fidObserver = new PerformanceObserver((list)=>{\n            const entries = list.getEntries();\n            entries.forEach((entry)=>{\n                const fidEntry = entry; // Type assertion for FID entry\n                if (fidEntry.processingStart) {\n                    console.log(\"FID:\", fidEntry.processingStart - fidEntry.startTime);\n                }\n            });\n        });\n        try {\n            fidObserver.observe({\n                entryTypes: [\n                    \"first-input\"\n                ]\n            });\n        } catch (e) {\n            // Fallback for browsers that don't support FID\n            console.log(\"FID observation not supported\");\n        }\n    }\n};\n// Image optimization helper\nconst getOptimizedImageProps = function(src, alt) {\n    let priority = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;\n    return {\n        src,\n        alt,\n        loading: priority ? \"eager\" : \"lazy\",\n        priority,\n        quality: 85,\n        sizes: \"(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw\"\n    };\n};\n// Bundle size analyzer helper\nconst logBundleInfo = ()=>{\n    if (true) {\n        console.log(\"Bundle analysis available with: npm run analyze\");\n    }\n};\n// Memory usage monitoring\nconst monitorMemoryUsage = ()=>{\n    if ( true && \"performance\" in window && \"memory\" in window.performance) {\n        const memory = window.performance.memory;\n        console.log(\"Memory usage:\", {\n            used: Math.round(memory.usedJSHeapSize / 1048576) + \" MB\",\n            total: Math.round(memory.totalJSHeapSize / 1048576) + \" MB\",\n            limit: Math.round(memory.jsHeapSizeLimit / 1048576) + \" MB\"\n        });\n    }\n};\n// Service Worker registration helper\nconst registerServiceWorker = ()=>{\n    if ( true && \"serviceWorker\" in navigator) {\n        window.addEventListener(\"load\", ()=>{\n            navigator.serviceWorker.register(\"/sw.js\").then((registration)=>{\n                console.log(\"SW registered: \", registration);\n            }).catch((registrationError)=>{\n                console.log(\"SW registration failed: \", registrationError);\n            });\n        });\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./utils/performance.ts\n"));

/***/ })

});